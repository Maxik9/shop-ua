import { useEffect, useRef, useState } from "react";

/**
 * –ü—Ä–æ—Å—Ç–∏–π WYSIWYG –∑ –∫–Ω–æ–ø–∫–æ—é "–î–∂–µ—Ä–µ–ª–æ".
 * –ü–æ–≤–µ—Ä—Ç–∞—î HTML —É onChange, –ø–æ–∫–∞–∑—É—î live-–≤–∏–≥–ª—è–¥ —è–∫ –Ω–∞ —Å–∞–π—Ç—ñ.
 */
export default function RichEditor({
  value = "",
  onChange = () => {},
  placeholder = "–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É‚Ä¶",
  minHeight = 220,
}) {
  const [html, setHtml] = useState(value || "");
  const [showSource, setShowSource] = useState(false);
  const editorRef = useRef(null);

  useEffect(() => {
    setHtml(value || "");
  }, [value]);

  const setAndEmit = (next) => {
    setHtml(next);
    onChange(next);
  };

  const exec = (cmd, val = null) => {
    editorRef.current?.focus();
    document.execCommand(cmd, false, val);
    setAndEmit(editorRef.current?.innerHTML || "");
  };

  const insertLink = () => {
    const url = prompt("–í—Å—Ç–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (https://‚Ä¶):", "");
    if (!url) return;
    exec("createLink", url);
  };

  const insertImage = () => {
    const url = prompt("URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", "");
    if (!url) return;
    exec("insertImage", url);
  };

  const clearAll = () => {
    if (!editorRef.current) return;
    editorRef.current.innerHTML = "";
    setAndEmit("");
  };

  const onInput = () => setAndEmit(editorRef.current?.innerHTML || "");

  return (
    <div>
      {/* toolbar */}
      <div className="flex flex-wrap gap-1 mb-2">
        <button type="button" className="btn-ghost" title="–ñ–∏—Ä–Ω–∏–π" onClick={() => exec("bold")}>B</button>
        <button type="button" className="btn-ghost" title="–ö—É—Ä—Å–∏–≤" onClick={() => exec("italic")}><i>–Ü</i></button>
        <button type="button" className="btn-ghost" title="–ü—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è" onClick={() => exec("underline")}><u>U</u></button>
        <button type="button" className="btn-ghost" title="–ó–∞–∫—Ä–µ—Å–ª–µ–Ω–Ω—è" onClick={() => exec("strikeThrough")}><s>S</s></button>

        <div className="mx-2 h-6 w-px bg-slate-300" />

        <button type="button" className="btn-ghost" title="–ú–∞—Ä–∫–µ—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫" onClick={() => exec("insertUnorderedList")}>‚Ä¢ –°–ø–∏—Å–æ–∫</button>
        <button type="button" className="btn-ghost" title="–ù—É–º–µ—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫" onClick={() => exec("insertOrderedList")}>1. –°–ø–∏—Å–æ–∫</button>

        <div className="mx-2 h-6 w-px bg-slate-300" />

        <button type="button" className="btn-ghost" title="H2" onClick={() => exec("formatBlock", "H2")}>H2</button>
        <button type="button" className="btn-ghost" title="H3" onClick={() => exec("formatBlock", "H3")}>H3</button>
        <button type="button" className="btn-ghost" title="–ó–≤–∏—á–∞–π–Ω–∏–π" onClick={() => exec("formatBlock", "P")}>P</button>

        <div className="mx-2 h-6 w-px bg-slate-300" />

        <button type="button" className="btn-ghost" title="–ü–æ—Å–∏–ª–∞–Ω–Ω—è" onClick={insertLink}>üîó</button>
        <button type="button" className="btn-ghost" title="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è (URL)" onClick={insertImage}>üñºÔ∏è</button>

        <div className="mx-2 h-6 w-px bg-slate-300" />

        <button type="button" className="btn-ghost" title="–õ—ñ–≤–æ—Ä—É—á" onClick={() => exec("justifyLeft")}>‚ü∏</button>
        <button type="button" className="btn-ghost" title="–ü–æ —Ü–µ–Ω—Ç—Ä—É" onClick={() => exec("justifyCenter")}>‚â°</button>
        <button type="button" className="btn-ghost" title="–ü—Ä–∞–≤–æ—Ä—É—á" onClick={() => exec("justifyRight")}>‚üπ</button>

        <div className="mx-2 h-6 w-px bg-slate-300" />

        <button type="button" className="btn-ghost" title="Undo" onClick={() => exec("undo")}>‚Ü∂</button>
        <button type="button" className="btn-ghost" title="Redo" onClick={() => exec("redo")}>‚Ü∑</button>
        <button type="button" className="btn-ghost" title="–û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è" onClick={() => exec("removeFormat")}>üßπ</button>
        <button type="button" className="btn-ghost" title="–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ" onClick={clearAll}>‚úñ</button>

        <div className="mx-2 h-6 w-px bg-slate-300" />

        <button
          type="button"
          className={`btn-ghost ${showSource ? "bg-slate-200" : ""}`}
          title="–ü–æ–∫–∞–∑–∞—Ç–∏/—Å—Ö–æ–≤–∞—Ç–∏ HTML"
          onClick={() => setShowSource((v) => !v)}
        >
          –î–∂–µ—Ä–µ–ª–æ
        </button>
      </div>

      {/* —Ä–µ–¥–∞–∫—Ç–æ—Ä */}
      {showSource ? (
        <textarea
          className="input font-mono min-h-[220px]"
          style={{ minHeight }}
          value={html}
          onChange={(e) => setAndEmit(e.target.value)}
          placeholder="<p>HTML –æ–ø–∏—Å‚Ä¶</p>"
        />
      ) : (
        <div
          ref={editorRef}
          className="input min-h-[220px] prose max-w-none"
          style={{ minHeight }}
          contentEditable
          suppressContentEditableWarning
          onInput={onInput}
          placeholder={placeholder}
          // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–∑–º—ñ—Ç–∫—É, —â–æ–± –æ–¥—Ä–∞–∑—É –±–∞—á–∏—Ç–∏ —è–∫ –Ω–∞ —Å–∞–π—Ç—ñ
          dangerouslySetInnerHTML={{ __html: html || "" }}
        />
      )}
    </div>
  );
}
