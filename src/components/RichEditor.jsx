import { useEffect, useRef, useState } from "react";

/**
 * WYSIWYG —ñ–∑ ¬´–ª–∏–ø–∫–∏–º¬ª —Ç—É–ª–±–∞—Ä–æ–º —ñ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–º —Å–∫—Ä–æ–ª–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
 * - Toolbar: position: sticky; –∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π
 * - Editor: –≤–ª–∞—Å–Ω–∏–π —Å–∫—Ä–æ–ª, adaptive –∫–æ–Ω—Ç–µ–Ω—Ç
 */
export default function RichEditor({
  value = "",
  onChange = () => {},
  placeholder = "–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É‚Ä¶",
  minHeight = 220,
  maxHeight = 420, // üëà —Ç–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –≤–∏—Å–æ—Ç–æ—é –æ–±–ª–∞—Å—Ç—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
}) {
  const [html, setHtml] = useState(value || "");
  const [showSource, setShowSource] = useState(false);
  const editorRef = useRef(null);

  useEffect(() => {
    setHtml(value || "");
  }, [value]);

  const setAndEmit = (next) => {
    setHtml(next);
    onChange(next);
  };

  const exec = (cmd, val = null) => {
    editorRef.current?.focus();
    document.execCommand(cmd, false, val);
    setAndEmit(editorRef.current?.innerHTML || "");
  };

  const insertLink = () => {
    const url = prompt("–í—Å—Ç–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (https://‚Ä¶):", "");
    if (!url) return;
    exec("createLink", url);
  };

  const insertImage = () => {
    const url = prompt("URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", "");
    if (!url) return;
    exec("insertImage", url);
  };

  const clearAll = () => {
    if (!editorRef.current) return;
    editorRef.current.innerHTML = "";
    setAndEmit("");
  };

  const onInput = () => setAndEmit(editorRef.current?.innerHTML || "");

  const onPaste = () => {
    // –ü—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —à–∏—Ä–∏–Ω–∏, —â–æ —Ä–æ–∑–¥—É–≤–∞—é—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
    setTimeout(() => {
      const el = editorRef.current;
      if (!el) return;
      el.querySelectorAll("[style]").forEach((n) => {
        const s = n.getAttribute("style") || "";
        const cleaned = s
          .replace(/(?:^|;)\s*width\s*:\s*[^;]+/gi, "")
          .replace(/(?:^|;)\s*max-width\s*:\s*[^;]+/gi, "");
        n.setAttribute("style", cleaned);
      });
      setAndEmit(el.innerHTML);
    }, 0);
  };

  return (
    <div className="rich-editor">
      <style>{`
        .rich-editor {
          --re-minh: ${minHeight}px;
          --re-maxh: ${maxHeight}px;
          border: 1px solid rgba(0,0,0,.1);
          border-radius: 12px;
          background: #fff;
        }

        .rich-editor .toolbar {
          position: sticky;
          top: 0;                 /* üëà "–ª–∏–ø–Ω–µ" –¥–æ –≤–µ—Ä—Ö—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
          z-index: 20;
          background: #fff;
          display: flex;
          flex-wrap: wrap;
          gap: 6px;
          padding: 10px;
          border-bottom: 1px solid rgba(0,0,0,.06);
        }

        .rich-editor .btn-ghost {
          padding: 6px 10px;
          border-radius: 8px;
          border: 1px solid rgba(0,0,0,.06);
          background: #fff;
          cursor: pointer;
        }
        .rich-editor .btn-ghost:hover { background: #f3f4f6; }

        .rich-editor .editor-wrap {
          padding: 10px; /* –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è */
        }

        .rich-editor .editor-surface {
          width: 100%;
          box-sizing: border-box;
          padding: 12px 14px;
          border-radius: 8px;
          border: 1px solid rgba(0,0,0,.06);
          min-height: var(--re-minh);
          max-height: var(--re-maxh); /* üëà –≤–ª–∞—Å–Ω–∏–π —Å–∫—Ä–æ–ª */
          overflow: auto;
          word-break: break-word;
          overflow-wrap: anywhere;
          background: #fff;
        }
        .rich-editor .editor-surface:empty:before {
          content: attr(data-placeholder);
          color: #94a3b8;
        }
        .rich-editor .editor-surface * { max-width: 100%; }
        .rich-editor .editor-surface img { max-width: 100%; height: auto; display: inline-block; }
        .rich-editor .editor-surface table { width: 100%; table-layout: auto; border-collapse: collapse; }
        .rich-editor .editor-surface td, .rich-editor .editor-surface th {
          border: 1px solid rgba(0,0,0,.08); padding: 6px;
        }
        .rich-editor .editor-surface > :first-child { margin-top: 0 !important; }
        .rich-editor .editor-surface > :last-child  { margin-bottom: 0 !important; }

        .rich-editor .source-area {
          width: 100%;
          min-height: var(--re-minh);
          max-height: var(--re-maxh);
          overflow: auto;
          box-sizing: border-box;
          padding: 12px 14px;
          border-radius: 8px;
          border: 1px solid rgba(0,0,0,.06);
          font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
          line-height: 1.5;
          white-space: pre-wrap;
          background: #fff;
        }

        .rich-editor .divider {
          width: 1px; height: 24px; background: #e5e7eb; margin: 0 6px;
        }
      `}</style>

      {/* sticky toolbar */}
      <div className="toolbar">
        <button type="button" className="btn-ghost" title="–ñ–∏—Ä–Ω–∏–π" onClick={() => exec("bold")}>B</button>
        <button type="button" className="btn-ghost" title="–ö—É—Ä—Å–∏–≤" onClick={() => exec("italic")}><i>–Ü</i></button>
        <button type="button" className="btn-ghost" title="–ü—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è" onClick={() => exec("underline")}><u>U</u></button>
        <button type="button" className="btn-ghost" title="–ó–∞–∫—Ä–µ—Å–ª–µ–Ω–Ω—è" onClick={() => exec("strikeThrough")}><s>S</s></button>

        <span className="divider" />

        <button type="button" className="btn-ghost" title="–ú–∞—Ä–∫–µ—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫" onClick={() => exec("insertUnorderedList")}>‚Ä¢ –°–ø–∏—Å–æ–∫</button>
        <button type="button" className="btn-ghost" title="–ù—É–º–µ—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫" onClick={() => exec("insertOrderedList")}>1. –°–ø–∏—Å–æ–∫</button>

        <span className="divider" />

        <button type="button" className="btn-ghost" title="H2" onClick={() => exec("formatBlock", "H2")}>H2</button>
        <button type="button" className="btn-ghost" title="H3" onClick={() => exec("formatBlock", "H3")}>H3</button>
        <button type="button" className="btn-ghost" title="–ó–≤–∏—á–∞–π–Ω–∏–π –∞–±–∑–∞—Ü" onClick={() => exec("formatBlock", "P")}>P</button>

        <span className="divider" />

        <button type="button" className="btn-ghost" title="–ü–æ—Å–∏–ª–∞–Ω–Ω—è" onClick={insertLink}>üîó</button>
        <button type="button" className="btn-ghost" title="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è (URL)" onClick={insertImage}>üñºÔ∏è</button>

        <span className="divider" />

        <button type="button" className="btn-ghost" title="–õ—ñ–≤–æ—Ä—É—á" onClick={() => exec("justifyLeft")}>‚ü∏</button>
        <button type="button" className="btn-ghost" title="–ü–æ —Ü–µ–Ω—Ç—Ä—É" onClick={() => exec("justifyCenter")}>‚â°</button>
        <button type="button" className="btn-ghost" title="–ü—Ä–∞–≤–æ—Ä—É—á" onClick={() => exec("justifyRight")}>‚üπ</button>

        <span className="divider" />

        <button type="button" className="btn-ghost" title="Undo" onClick={() => exec("undo")}>‚Ü∂</button>
        <button type="button" className="btn-ghost" title="Redo" onClick={() => exec("redo")}>‚Ü∑</button>
        <button type="button" className="btn-ghost" title="–û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è" onClick={() => exec("removeFormat")}>üßπ</button>
        <button type="button" className="btn-ghost" title="–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ" onClick={clearAll}>‚úñ</button>

        <span className="divider" />

        <button
          type="button"
          className={`btn-ghost ${showSource ? "bg-slate-200" : ""}`}
          title="–ü–æ–∫–∞–∑–∞—Ç–∏/—Å—Ö–æ–≤–∞—Ç–∏ HTML"
          onClick={() => setShowSource((v) => !v)}
        >
          –î–∂–µ—Ä–µ–ª–æ
        </button>
      </div>

      {/* scrollable editor area */}
      <div className="editor-wrap">
        {showSource ? (
          <textarea
            className="source-area"
            value={html}
            onChange={(e) => setAndEmit(e.target.value)}
            placeholder="<p>HTML –æ–ø–∏—Å‚Ä¶</p>"
          />
        ) : (
          <div
            ref={editorRef}
            className="editor-surface"
            contentEditable
            suppressContentEditableWarning
            onInput={onInput}
            onPaste={onPaste}
            data-placeholder={placeholder}
            dangerouslySetInnerHTML={{ __html: html || "" }}
          />
        )}
      </div>
    </div>
  );
}
