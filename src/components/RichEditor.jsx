// src/components/RichEditor.jsx
import React, { useEffect, useMemo, useRef, useState } from "react";

/**
 * –õ–µ–≥–∫–∏–π WYSIWYG-—Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–∞ –±–∞–∑—ñ contentEditable.
 * - –ñ–∏—Ä–Ω–∏–π/–∫—É—Ä—Å–∏–≤/–ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è/–∑–∞–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
 * - –ú–∞—Ä–∫–æ–≤–∞–Ω–∏–π/–Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ (—ñ–∑ –ª–æ–∫–∞–ª—å–Ω–∏–º CSS –¥–ª—è –∫—Ä–∞–ø–æ–∫/—Ü–∏—Ñ—Ä)
 * - –í—Å—Ç–∞–≤–∫–∞ –ø–æ—Å–∏–ª–∞–Ω—å —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
 * - –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
 * - –ö–Ω–æ–ø–∫–∞ ¬´–¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è¬ª ‚Üí display:block; margin:0 auto; float:none
 * - –ü–µ—Ä–µ–º–∏–∫–∞—á ¬´–î–∂–µ—Ä–µ–ª–æ¬ª (HTML)
 */
export default function RichEditor({
  value = "",
  onChange = () => {},
  placeholder = "–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É‚Ä¶",
  minHeight = 220,
  maxHeight = 420,
}) {
  const editorRef = useRef(null);
  const [showSource, setShowSource] = useState(false);
  const [html, setHtml] = useState(value || "");

  // —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ value
  useEffect(() => {
    setHtml(value || "");
    if (!showSource && editorRef.current) {
      if (editorRef.current.innerHTML !== (value || "")) {
        editorRef.current.innerHTML = value || "";
      }
    }
  }, [value, showSource]);

  // –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –≤–º—ñ—Å—Ç
  useEffect(() => {
    if (editorRef.current) {
      editorRef.current.innerHTML = html || "";
    }
  }, []); // –æ–¥–∏–Ω —Ä–∞–∑

  const emit = () => {
    const cur = editorRef.current?.innerHTML || "";
    setHtml(cur);
    onChange(cur);
  };

  const exec = (cmd, val = null) => {
    editorRef.current?.focus();
    document.execCommand(cmd, false, val);
    emit();
  };

  const insertLink = () => {
    const url = window.prompt("–í—Å—Ç–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (https://‚Ä¶):", "");
    if (!url) return;
    exec("createLink", url);
  };

  const insertImage = () => {
    const url = window.prompt("URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", "");
    if (!url) return;
    exec("insertImage", url);
  };

  // –ó–Ω–∞–π—Ç–∏ IMG –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –≤–∏–¥—ñ–ª–µ–Ω–Ω—ñ (–∞–±–æ —î–¥–∏–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –±–ª–æ—Ü—ñ)
  const getSelectedImage = () => {
    const sel = window.getSelection();
    if (!sel || sel.rangeCount === 0) return null;

    // 1) —è–∫—â–æ –∫—É—Ä—Å–æ—Ä –ø—Ä—è–º–æ –Ω–∞ IMG
    let node = sel.anchorNode;
    if (!node) return null;
    if (node.nodeType === Node.TEXT_NODE) node = node.parentNode;

    let cur = node;
    while (cur && cur !== editorRef.current) {
      if (cur.nodeName === "IMG") return cur;
      cur = cur.parentNode;
    }

    // 2) —è–∫—â–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –æ—Ö–æ–ø–ª—é—î IMG
    const range = sel.getRangeAt(0);
    const frag = range.cloneContents();
    const imgInside = frag.querySelector && frag.querySelector("img");
    if (imgInside) return imgInside;

    // 3) —è–∫—â–æ –∫—É—Ä—Å–æ—Ä —É –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ –∑ —î–¥–∏–Ω–∏–º IMG
    const block = node.closest ? node.closest("p,div") : null;
    if (block) {
      const imgs = block.getElementsByTagName("img");
      if (imgs && imgs.length === 1) return imgs[0];
    }

    return null;
    };

  const centerImage = () => {
    const el = editorRef.current;
    if (!el) return;
    el.focus();

    const img = getSelectedImage();
    if (!img) {
      alert("–ö–ª—ñ–∫–Ω—ñ—Ç—å –ø–æ –∫–∞—Ä—Ç–∏–Ω—Ü—ñ (–≤–∏–¥—ñ–ª—ñ—Ç—å —ó—ó) —ñ —â–µ —Ä–∞–∑ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è¬ª.");
      return;
    }

    // –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–µ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
    img.style.display = "block";
    img.style.margin = "0 auto";
    img.style.float = "none";
    emit();
  };

  const clearAll = () => {
    if (!editorRef.current) return;
    editorRef.current.innerHTML = "";
    emit();
  };

  const onInput = () => emit();

  // —á–∏—Å—Ç–∏–º–æ —à–∏—Ä–∏–Ω–∏ –ø—ñ—Å–ª—è paste, —â–æ–± –Ω–µ –ª–∞–º–∞–ª–æ –≤–µ—Ä—Å—Ç–∫—É
  const onPaste = () => {
    setTimeout(() => {
      const el = editorRef.current;
      if (!el) return;
      el.querySelectorAll("[style]").forEach((n) => {
        const s = n.getAttribute("style") || "";
        const cleaned = s
          .replace(/(?:^|;)\s*width\s*:\s*[^;]+/gi, "")
          .replace(/(?:^|;)\s*max-width\s*:\s*[^;]+/gi, "");
        n.setAttribute("style", cleaned);
      });
      emit();
    }, 0);
  };

  const toggleSource = () => {
    if (!showSource) {
      setHtml(editorRef.current?.innerHTML || "");
      setShowSource(true);
    } else {
      setShowSource(false);
      requestAnimationFrame(() => {
        if (editorRef.current) {
          editorRef.current.innerHTML = html || "";
          onChange(html || "");
        }
      });
    }
  };

  // –ª–æ–∫–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ ‚Äî –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑—ñ —Å–ø–∏—Å–∫–∞–º–∏
  const styleTag = useMemo(() => {
    const css = `
.rich-editor {
  --re-minh: ${minHeight}px;
  --re-maxh: ${maxHeight}px;
  border: 1px solid rgba(0,0,0,.1);
  border-radius: 12px;
  background: #fff;
  overflow: hidden;
}
.rich-editor .toolbar {
  position: sticky;
  top: 0;
  z-index: 20;
  background: #fff;
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  padding: 10px;
  border-bottom: 1px solid rgba(0,0,0,.06);
}
.rich-editor .btn-ghost {
  padding: 6px 10px;
  border-radius: 8px;
  border: 1px solid rgba(0,0,0,.06);
  background: #fff;
  cursor: pointer;
}
.rich-editor .btn-ghost:hover { background: #f3f4f6; }
.rich-editor .divider { width: 1px; height: 24px; background: #e5e7eb; margin: 0 6px; }

.rich-editor .editor-wrap { padding: 10px; }
.rich-editor .editor-surface {
  width: 100%;
  box-sizing: border-box;
  padding: 12px 14px;
  border-radius: 8px;
  border: 1px solid rgba(0,0,0,.06);
  min-height: var(--re-minh);
  max-height: var(--re-maxh);
  overflow: auto;
  overflow-anchor: none;
  word-break: break-word;
  overflow-wrap: anywhere;
  background: #fff;
}
.rich-editor .editor-surface:empty:before {
  content: attr(data-placeholder);
  color: #94a3b8;
}
/* –í–ê–ñ–õ–ò–í–û: —Å–ø–∏—Å–∫–∏ –∑–∞–≤–∂–¥–∏ –∑ –º–∞—Ä–∫–µ—Ä–∞–º–∏/—Ü–∏—Ñ—Ä–∞–º–∏ —Ç–∞ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏ */
.rich-editor .editor-surface ul {
  list-style: disc;
  margin: 0.5em 0 0.5em 1.25em;
  padding-left: 1.25em;
}
.rich-editor .editor-surface ol {
  list-style: decimal;
  margin: 0.5em 0 0.5em 1.25em;
  padding-left: 1.25em;
}
.rich-editor .editor-surface li { margin: 0.2em 0; }

.rich-editor .editor-surface * { max-width: 100%; }
.rich-editor .editor-surface img { max-width: 100%; height: auto; display: inline-block; }
.rich-editor .editor-surface table { width: 100%; table-layout: auto; border-collapse: collapse; }
.rich-editor .editor-surface td, .rich-editor .editor-surface th {
  border: 1px solid rgba(0,0,0,.08); padding: 6px;
}
.rich-editor .editor-surface > :first-child { margin-top: 0 !important; }
.rich-editor .editor-surface > :last-child  { margin-bottom: 0 !important; }

.rich-editor .source-area {
  width: 100%;
  min-height: var(--re-minh);
  max-height: var(--re-maxh);
  overflow: auto;
  box-sizing: border-box;
  padding: 12px 14px;
  border-radius: 8px;
  border: 1px solid rgba(0,0,0,.06);
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  line-height: 1.5;
  white-space: pre-wrap;
  background: #fff;
}
    `.trim();
    return <style dangerouslySetInnerHTML={{ __html: css }} />;
  }, [minHeight, maxHeight]);

  return (
    <div className="rich-editor">
      {styleTag}

      {/* –¢—É–ª–±–∞—Ä */}
      <div className="toolbar">
        <button className="btn-ghost" onClick={() => exec("bold")}><b>B</b></button>
        <button className="btn-ghost" onClick={() => exec("italic")}><i>–Ü</i></button>
        <button className="btn-ghost" onClick={() => exec("underline")}><u>U</u></button>
        <button className="btn-ghost" onClick={() => exec("strikeThrough")}><s>S</s></button>
        <span className="divider" />
        <button className="btn-ghost" onClick={() => exec("insertUnorderedList")}>‚Ä¢ –°–ø–∏—Å–æ–∫</button>
        <button className="btn-ghost" onClick={() => exec("insertOrderedList")}>1. –°–ø–∏—Å–æ–∫</button>
        <span className="divider" />
        <button className="btn-ghost" onClick={() => exec("justifyLeft")}>‚ü∏</button>
        <button className="btn-ghost" onClick={() => exec("justifyCenter")}>‚â°</button>
        <button className="btn-ghost" onClick={() => exec("justifyRight")}>‚üπ</button>
        <span className="divider" />
        <button className="btn-ghost" onClick={insertLink}>üîó</button>
        <button className="btn-ghost" onClick={insertImage}>üñºÔ∏è</button>
        <button className="btn-ghost" onClick={centerImage}>üß≤ –¶–µ–Ω—Ç—Ä</button>
        <span className="divider" />
        <button className="btn-ghost" onClick={() => exec("undo")}>‚Ü∂</button>
        <button className="btn-ghost" onClick={() => exec("redo")}>‚Ü∑</button>
        <button className="btn-ghost" onClick={() => exec("removeFormat")}>üßπ</button>
        <button className="btn-ghost" onClick={clearAll}>‚úñ</button>
        <span className="divider" />
        <button className="btn-ghost" onClick={toggleSource}>–î–∂–µ—Ä–µ–ª–æ</button>
      </div>

      <div className="editor-wrap">
        {showSource ? (
          <textarea
            className="source-area"
            value={html}
            onChange={(e) => setHtml(e.target.value)}
            onBlur={() => onChange(html)}
          />
        ) : (
          <div
            ref={editorRef}
            className="editor-surface"
            contentEditable
            suppressContentEditableWarning
            data-placeholder={placeholder}
            onInput={onInput}
            onPaste={onPaste}
          />
        )}
      </div>
    </div>
  );
}
